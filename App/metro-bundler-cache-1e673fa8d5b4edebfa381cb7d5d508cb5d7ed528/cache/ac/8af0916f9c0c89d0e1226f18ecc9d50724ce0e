Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.statics = exports.NAMESPACE = exports.MODULE_NAME = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _log = require('../../utils/log');

var _ModuleBase2 = require('../../utils/ModuleBase');

var _ModuleBase3 = _interopRequireDefault(_ModuleBase2);

var _native = require('../../utils/native');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MODULE_NAME = exports.MODULE_NAME = 'RNFirebaseRemoteConfig';
var NAMESPACE = exports.NAMESPACE = 'config';

var RemoteConfig = function (_ModuleBase) {
  _inherits(RemoteConfig, _ModuleBase);

  function RemoteConfig(app) {
    _classCallCheck(this, RemoteConfig);

    var _this = _possibleConstructorReturn(this, (RemoteConfig.__proto__ || Object.getPrototypeOf(RemoteConfig)).call(this, app, {
      moduleName: MODULE_NAME,
      multiApp: false,
      namespace: NAMESPACE
    }));

    _this._developerModeEnabled = false;
    return _this;
  }

  _createClass(RemoteConfig, [{
    key: '_nativeValueToJS',
    value: function _nativeValueToJS(nativeValue) {
      return {
        source: nativeValue.source,
        val: function val() {
          if (nativeValue.boolValue !== null && (nativeValue.stringValue === 'true' || nativeValue.stringValue === 'false' || nativeValue.stringValue === null)) return nativeValue.boolValue;
          if (nativeValue.numberValue !== null && nativeValue.numberValue !== undefined && (nativeValue.stringValue == null || nativeValue.stringValue === '' || nativeValue.numberValue.toString() === nativeValue.stringValue)) return nativeValue.numberValue;
          if (nativeValue.dataValue !== nativeValue.stringValue && (nativeValue.stringValue == null || nativeValue.stringValue === '')) return nativeValue.dataValue;
          return nativeValue.stringValue;
        }
      };
    }
  }, {
    key: 'enableDeveloperMode',
    value: function enableDeveloperMode() {
      if (!this._developerModeEnabled) {
        (0, _log.getLogger)(this).debug('Enabled developer mode');
        (0, _native.getNativeModule)(this).enableDeveloperMode();
        this._developerModeEnabled = true;
      }
    }
  }, {
    key: 'fetch',
    value: function fetch(expiration) {
      if (expiration !== undefined) {
        (0, _log.getLogger)(this).debug('Fetching remote config data with expiration ' + expiration.toString());
        return (0, _native.getNativeModule)(this).fetchWithExpirationDuration(expiration);
      }
      (0, _log.getLogger)(this).debug('Fetching remote config data');
      return (0, _native.getNativeModule)(this).fetch();
    }
  }, {
    key: 'activateFetched',
    value: function activateFetched() {
      (0, _log.getLogger)(this).debug('Activating remote config');
      return (0, _native.getNativeModule)(this).activateFetched();
    }
  }, {
    key: 'getValue',
    value: function getValue(key) {
      return (0, _native.getNativeModule)(this).getValue(key || '').then(this._nativeValueToJS);
    }
  }, {
    key: 'getValues',
    value: function getValues(keys) {
      var _this2 = this;

      return (0, _native.getNativeModule)(this).getValues(keys || []).then(function (nativeValues) {
        var values = {};
        for (var i = 0, len = keys.length; i < len; i++) {
          values[keys[i]] = _this2._nativeValueToJS(nativeValues[i]);
        }
        return values;
      });
    }
  }, {
    key: 'getKeysByPrefix',
    value: function getKeysByPrefix(prefix) {
      return (0, _native.getNativeModule)(this).getKeysByPrefix(prefix);
    }
  }, {
    key: 'setDefaults',
    value: function setDefaults(defaults) {
      (0, _native.getNativeModule)(this).setDefaults(defaults);
    }
  }, {
    key: 'setDefaultsFromResource',
    value: function setDefaultsFromResource(resource) {
      (0, _native.getNativeModule)(this).setDefaultsFromResource(resource);
    }
  }]);

  return RemoteConfig;
}(_ModuleBase3.default);

exports.default = RemoteConfig;
var statics = exports.statics = {};