Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require('../index.js');

var _index2 = _interopRequireDefault(_index);

var _XMLHttpRequestEventTarget = require('./XMLHttpRequestEventTarget.js');

var _XMLHttpRequestEventTarget2 = _interopRequireDefault(_XMLHttpRequestEventTarget);

var _log = require('../utils/log.js');

var _log2 = _interopRequireDefault(_log);

var _Blob = require('./Blob.js');

var _Blob2 = _interopRequireDefault(_Blob);

var _ProgressEvent = require('./ProgressEvent.js');

var _ProgressEvent2 = _interopRequireDefault(_ProgressEvent);

var _uri = require('../utils/uri');

var _uri2 = _interopRequireDefault(_uri);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var log = new _log2.default('XMLHttpRequest');

log.disable();


var UNSENT = 0;
var OPENED = 1;
var HEADERS_RECEIVED = 2;
var LOADING = 3;
var DONE = 4;

var XMLHttpRequest = function (_XMLHttpRequestEventT) {
  _inherits(XMLHttpRequest, _XMLHttpRequestEventT);

  _createClass(XMLHttpRequest, [{
    key: 'UNSENT',
    get: function get() {
      return UNSENT;
    }
  }, {
    key: 'OPENED',
    get: function get() {
      return OPENED;
    }
  }, {
    key: 'HEADERS_RECEIVED',
    get: function get() {
      return HEADERS_RECEIVED;
    }
  }, {
    key: 'LOADING',
    get: function get() {
      return LOADING;
    }
  }, {
    key: 'DONE',
    get: function get() {
      return DONE;
    }
  }], [{
    key: 'setLog',
    value: function setLog(level) {
      if (level === -1) log.disable();else log.level(level);
    }
  }, {
    key: 'addBinaryContentType',
    value: function addBinaryContentType(substr) {
      for (var i in XMLHttpRequest.binaryContentTypes) {
        if (new RegExp(substr, 'i').test(XMLHttpRequest.binaryContentTypes[i])) {
          return;
        }
      }
      XMLHttpRequest.binaryContentTypes.push(substr);
    }
  }, {
    key: 'removeBinaryContentType',
    value: function removeBinaryContentType(val) {
      for (var i in XMLHttpRequest.binaryContentTypes) {
        if (new RegExp(substr, 'i').test(XMLHttpRequest.binaryContentTypes[i])) {
          XMLHttpRequest.binaryContentTypes.splice(i, 1);
          return;
        }
      }
    }
  }, {
    key: 'UNSENT',
    get: function get() {
      return UNSENT;
    }
  }, {
    key: 'OPENED',
    get: function get() {
      return OPENED;
    }
  }, {
    key: 'HEADERS_RECEIVED',
    get: function get() {
      return HEADERS_RECEIVED;
    }
  }, {
    key: 'LOADING',
    get: function get() {
      return LOADING;
    }
  }, {
    key: 'DONE',
    get: function get() {
      return DONE;
    }
  }]);

  function XMLHttpRequest() {
    _classCallCheck(this, XMLHttpRequest);

    log.verbose('XMLHttpRequest constructor called');

    var _this = _possibleConstructorReturn(this, (XMLHttpRequest.__proto__ || Object.getPrototypeOf(XMLHttpRequest)).call(this));

    _this.upload = new _XMLHttpRequestEventTarget2.default();
    _this._readyState = UNSENT;
    _this._uriType = 'net';
    _this._response = '';
    _this._responseText = '';
    _this._responseHeaders = {};
    _this._responseType = '';
    _this._responseURL = '';
    _this._responseXML = '';
    _this._status = 0;
    _this._statusText = '';
    _this._timeout = 60000;
    _this._sendFlag = false;
    _this._uploadStarted = false;
    _this._increment = false;
    _this._config = {};
    _this._headers = {
      'Content-Type': 'text/plain'
    };
    _this._cleanUp = null;

    _this._headerReceived = function (e) {
      log.debug('header received ', _this._task.taskId, e);
      _this.responseURL = _this._url;
      if (e.state === "2" && e.taskId === _this._task.taskId) {
        _this._responseHeaders = e.headers;
        _this._statusText = e.status;
        _this._status = Math.floor(e.status);
        _this._dispatchReadStateChange(XMLHttpRequest.HEADERS_RECEIVED);
      }
    };

    _this._uploadProgressEvent = function (send, total) {
      if (!_this._uploadStarted) {
        _this.upload.dispatchEvent('loadstart');
        _this._uploadStarted = true;
      }
      if (send >= total) _this.upload.dispatchEvent('load');
      _this.upload.dispatchEvent('progress', new _ProgressEvent2.default(true, send, total));
    };

    _this._progressEvent = function (send, total, chunk) {
      log.verbose(_this.readyState);
      if (_this._readyState === XMLHttpRequest.HEADERS_RECEIVED) _this._dispatchReadStateChange(XMLHttpRequest.LOADING);
      var lengthComputable = false;
      if (total && total >= 0) lengthComputable = true;
      var e = new _ProgressEvent2.default(lengthComputable, send, total);

      if (_this._increment) {
        _this._responseText += chunk;
      }
      _this.dispatchEvent('progress', e);
    };

    _this._onError = function (err) {
      var statusCode = Math.floor(_this.status);
      if (statusCode >= 100 && statusCode !== 408) {
        return;
      }
      log.debug('XMLHttpRequest error', err);
      _this._statusText = err;
      _this._status = String(err).match(/\d+/);
      _this._status = _this._status ? Math.floor(_this.status) : 404;
      _this._dispatchReadStateChange(XMLHttpRequest.DONE);
      if (err && String(err.message).match(/(timed\sout|timedout)/) || _this._status == 408) {
        _this.dispatchEvent('timeout');
      }
      _this.dispatchEvent('loadend');
      _this.dispatchEvent('error', {
        type: 'error',
        detail: err
      });
      _this.clearEventListeners();
    };

    _this._onDone = function (resp) {
      log.debug('XMLHttpRequest done', _this._url, resp, _this);
      _this._statusText = _this._status;
      var responseDataReady = function responseDataReady() {
        log.debug('request done state = 4');
        _this.dispatchEvent('load');
        _this.dispatchEvent('loadend');
        _this._dispatchReadStateChange(XMLHttpRequest.DONE);
        _this.clearEventListeners();
      };
      if (resp) {
        var info = resp.respInfo || {};
        log.debug(_this._url, info, info.respType);
        switch (_this._responseType) {
          case 'blob':
            resp.blob().then(function (b) {
              _this._responseText = resp.text();
              _this._response = b;
              responseDataReady();
            });
            break;
          case 'arraybuffer':
            break;
          case 'json':
            _this._response = resp.json();
            _this._responseText = resp.text();
            break;
          default:
            _this._responseText = resp.text();
            _this._response = _this.responseText;
            responseDataReady();
            break;
        }
      }
    };

    return _this;
  }

  _createClass(XMLHttpRequest, [{
    key: 'open',
    value: function open(method, url, async, user, password) {
      log.verbose('XMLHttpRequest open ', method, url, async, user, password);
      this._method = method;
      this._url = url;
      this._headers = {};
      this._increment = _uri2.default.isJSONStreamURI(this._url);
      this._url = this._url.replace(/^JSONStream\:\/\//, '');
      this._dispatchReadStateChange(XMLHttpRequest.OPENED);
    }
  }, {
    key: 'send',
    value: function send(body) {
      var _this2 = this;

      this._body = body;

      if (this._readyState !== XMLHttpRequest.OPENED) throw 'InvalidStateError : XMLHttpRequest is not opened yet.';
      var promise = Promise.resolve();
      this._sendFlag = true;
      log.verbose('XMLHttpRequest send ', body);
      var _method = this._method,
          _url = this._url,
          _headers = this._headers;

      log.verbose('sending request with args', _method, _url, _headers, body);
      log.verbose(typeof body, body instanceof FormData);

      if (body instanceof _Blob2.default) {
        log.debug('sending blob body', body._blobCreated);
        promise = new Promise(function (resolve, reject) {
          body.onCreated(function (blob) {
            if (blob.isDerived) {
              _this2._cleanUp = function () {
                blob.close();
              };
            }
            log.debug('body created send request');
            body = _index2.default.wrap(blob.getRNFetchBlobRef());
            resolve();
          });
        });
      } else if (typeof body === 'object') {
        body = JSON.stringify(body);
        promise = Promise.resolve();
      } else {
        body = body ? body.toString() : body;
        promise = Promise.resolve();
      }

      promise.then(function () {
        log.debug('send request invoke', body);
        for (var h in _headers) {
          _headers[h] = _headers[h].toString();
        }

        _this2._task = _index2.default.config({
          auto: true,
          timeout: _this2._timeout,
          increment: _this2._increment,
          binaryContentTypes: XMLHttpRequest.binaryContentTypes
        }).fetch(_method, _url, _headers, body);
        _this2._task.stateChange(_this2._headerReceived).uploadProgress(_this2._uploadProgressEvent).progress(_this2._progressEvent).catch(_this2._onError).then(_this2._onDone);
      });
    }
  }, {
    key: 'overrideMimeType',
    value: function overrideMimeType(mime) {
      log.verbose('XMLHttpRequest overrideMimeType', mime);
      this._headers['Content-Type'] = mime;
    }
  }, {
    key: 'setRequestHeader',
    value: function setRequestHeader(name, value) {
      log.verbose('XMLHttpRequest set header', name, value);
      if (this._readyState !== OPENED || this._sendFlag) {
        throw 'InvalidStateError : Calling setRequestHeader in wrong state  ' + this._readyState;
      }

      if (typeof name !== 'string' || /[^\u0000-\u00ff]/.test(name)) {
        throw 'TypeError : header field name should be a string';
      }

      var invalidPatterns = [/[\(\)\>\<\@\,\:\\\/\[\]\?\=\}\{\s\ \u007f\;\t\0\v\r]/, /tt/];
      for (var i in invalidPatterns) {
        if (invalidPatterns[i].test(name) || typeof name !== 'string') {
          throw 'SyntaxError : Invalid header field name ' + name;
        }
      }
      this._headers[name] = value;
    }
  }, {
    key: 'abort',
    value: function abort() {
      var _this3 = this;

      log.verbose('XMLHttpRequest abort ');
      if (!this._task) return;
      this._task.cancel(function (err) {
        var e = {
          timeStamp: Date.now()
        };
        if (_this3.onabort) _this3.onabort();
        if (err) {
          e.detail = err;
          e.type = 'error';
          _this3.dispatchEvent('error', e);
        } else {
          e.type = 'abort';
          _this3.dispatchEvent('abort', e);
        }
      });
    }
  }, {
    key: 'getResponseHeader',
    value: function getResponseHeader(field) {
      log.verbose('XMLHttpRequest get header', field, this._responseHeaders);
      if (!this._responseHeaders) return null;
      return this._responseHeaders[field] || this._responseHeaders[field.toLowerCase()] || null;
    }
  }, {
    key: 'getAllResponseHeaders',
    value: function getAllResponseHeaders() {
      log.verbose('XMLHttpRequest get all headers', this._responseHeaders);
      if (!this._responseHeaders) return '';
      var result = '';
      var respHeaders = this.responseHeaders;
      for (var i in respHeaders) {
        result += i + ': ' + respHeaders[i] + String.fromCharCode(0x0D, 0x0A);
      }
      return result.substr(0, result.length - 2);
    }
  }, {
    key: '_dispatchReadStateChange',
    value: function _dispatchReadStateChange(state) {
      this._readyState = state;
      if (typeof this._onreadystatechange === 'function') this._onreadystatechange();
    }
  }, {
    key: 'onreadystatechange',
    set: function set(fn) {
      log.verbose('XMLHttpRequest set onreadystatechange', fn);
      this._onreadystatechange = fn;
    },
    get: function get() {
      return this._onreadystatechange;
    }
  }, {
    key: 'readyState',
    get: function get() {
      log.verbose('get readyState', this._readyState);
      return this._readyState;
    }
  }, {
    key: 'status',
    get: function get() {
      log.verbose('get status', this._status);
      return this._status;
    }
  }, {
    key: 'statusText',
    get: function get() {
      log.verbose('get statusText', this._statusText);
      return this._statusText;
    }
  }, {
    key: 'response',
    get: function get() {
      log.verbose('get response', this._response);
      return this._response;
    }
  }, {
    key: 'responseText',
    get: function get() {
      log.verbose('get responseText', this._responseText);
      return this._responseText;
    }
  }, {
    key: 'responseURL',
    get: function get() {
      log.verbose('get responseURL', this._responseURL);
      return this._responseURL;
    }
  }, {
    key: 'responseHeaders',
    get: function get() {
      log.verbose('get responseHeaders', this._responseHeaders);
      return this._responseHeaders;
    }
  }, {
    key: 'timeout',
    set: function set(val) {
      this._timeout = val * 1000;
      log.verbose('set timeout', this._timeout);
    },
    get: function get() {
      log.verbose('get timeout', this._timeout);
      return this._timeout;
    }
  }, {
    key: 'responseType',
    set: function set(val) {
      log.verbose('set response type', this._responseType);
      this._responseType = val;
    },
    get: function get() {
      log.verbose('get response type', this._responseType);
      return this._responseType;
    }
  }], [{
    key: 'isRNFBPolyfill',
    get: function get() {
      return true;
    }
  }]);

  return XMLHttpRequest;
}(_XMLHttpRequestEventTarget2.default);

XMLHttpRequest.binaryContentTypes = ['image/', 'video/', 'audio/'];
exports.default = XMLHttpRequest;