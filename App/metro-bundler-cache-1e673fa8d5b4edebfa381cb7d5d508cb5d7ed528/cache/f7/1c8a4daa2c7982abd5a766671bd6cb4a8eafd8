Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Queue = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Database = require('../config/Database');

var _Database2 = _interopRequireDefault(_Database);

var _reactNativeUuid = require('react-native-uuid');

var _reactNativeUuid2 = _interopRequireDefault(_reactNativeUuid);

var _Worker = require('./Worker');

var _Worker2 = _interopRequireDefault(_Worker);

var _promiseReflect = require('promise-reflect');

var _promiseReflect2 = _interopRequireDefault(_promiseReflect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Queue = exports.Queue = function () {
  function Queue() {
    _classCallCheck(this, Queue);

    this.realm = null;
    this.worker = new _Worker2.default();
    this.status = 'inactive';
  }

  _createClass(Queue, [{
    key: 'init',
    value: function init() {
      return regeneratorRuntime.async(function init$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(this.realm === null)) {
                _context.next = 4;
                break;
              }

              _context.next = 3;
              return regeneratorRuntime.awrap(_Database2.default.getRealmInstance());

            case 3:
              this.realm = _context.sent;

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'addWorker',
    value: function addWorker(jobName, worker) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      this.worker.addWorker(jobName, worker, options);
    }
  }, {
    key: 'removeWorker',
    value: function removeWorker(jobName) {
      this.worker.removeWorker(jobName);
    }
  }, {
    key: 'createJob',
    value: function createJob(name) {
      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var _this = this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var startQueue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;


      if (!name) {
        throw new Error('Job name must be supplied.');
      }

      if (options.timeout < 0 || options.attempts < 0) {
        throw new Error('Invalid job option.');
      }

      this.realm.write(function () {

        _this.realm.create('Job', {
          id: _reactNativeUuid2.default.v4(),
          name: name,
          payload: JSON.stringify(payload),
          data: JSON.stringify({
            attempts: options.attempts || 1
          }),
          priority: options.priority || 0,
          active: false,
          timeout: options.timeout >= 0 ? options.timeout : 25000,
          created: new Date(),
          failed: null
        });
      });

      if (startQueue && this.status == 'inactive') {
        this.start();
      }
    }
  }, {
    key: 'start',
    value: function start() {
      var _this2 = this;

      var lifespan = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var startTime, lifespanRemaining, concurrentJobs, processingJobs;
      return regeneratorRuntime.async(function start$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(this.status == 'active')) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt('return', false);

            case 2:

              this.status = 'active';

              startTime = Date.now();
              lifespanRemaining = null;
              concurrentJobs = [];

              if (!(lifespan !== 0)) {
                _context2.next = 14;
                break;
              }

              lifespanRemaining = lifespan - (Date.now() - startTime);
              lifespanRemaining = lifespanRemaining === 0 ? -1 : lifespanRemaining;_context2.next = 11;
              return regeneratorRuntime.awrap(this.getConcurrentJobs(lifespanRemaining));

            case 11:
              concurrentJobs = _context2.sent;
              _context2.next = 17;
              break;

            case 14:
              _context2.next = 16;
              return regeneratorRuntime.awrap(this.getConcurrentJobs());

            case 16:
              concurrentJobs = _context2.sent;

            case 17:
              if (!(this.status == 'active' && concurrentJobs.length)) {
                _context2.next = 34;
                break;
              }

              processingJobs = concurrentJobs.map(function (job) {
                return _this2.processJob(job);
              });
              _context2.next = 21;
              return regeneratorRuntime.awrap(Promise.all(processingJobs.map(_promiseReflect2.default)));

            case 21:
              if (!(lifespan !== 0)) {
                _context2.next = 29;
                break;
              }

              lifespanRemaining = lifespan - (Date.now() - startTime);
              lifespanRemaining = lifespanRemaining === 0 ? -1 : lifespanRemaining;_context2.next = 26;
              return regeneratorRuntime.awrap(this.getConcurrentJobs(lifespanRemaining));

            case 26:
              concurrentJobs = _context2.sent;
              _context2.next = 32;
              break;

            case 29:
              _context2.next = 31;
              return regeneratorRuntime.awrap(this.getConcurrentJobs());

            case 31:
              concurrentJobs = _context2.sent;

            case 32:
              _context2.next = 17;
              break;

            case 34:

              this.status = 'inactive';

            case 35:
            case 'end':
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'stop',
    value: function stop() {
      this.status = 'inactive';
    }
  }, {
    key: 'getJobs',
    value: function getJobs() {
      var _this3 = this;

      var sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var jobs;
      return regeneratorRuntime.async(function getJobs$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!sync) {
                _context3.next = 6;
                break;
              }

              jobs = null;

              this.realm.write(function () {

                jobs = _this3.realm.objects('Job');
              });

              return _context3.abrupt('return', jobs);

            case 6:
              _context3.next = 8;
              return regeneratorRuntime.awrap(this.realm.objects('Job'));

            case 8:
              return _context3.abrupt('return', _context3.sent);

            case 9:
            case 'end':
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'getConcurrentJobs',
    value: function getConcurrentJobs() {
      var _this4 = this;

      var queueLifespanRemaining = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var concurrentJobs;
      return regeneratorRuntime.async(function getConcurrentJobs$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              concurrentJobs = [];


              this.realm.write(function () {
                var nextJob = null;

                var timeoutUpperBound = queueLifespanRemaining - 500 > 0 ? queueLifespanRemaining - 499 : 0;

                var initialQuery = queueLifespanRemaining ? 'active == FALSE AND failed == null AND timeout > 0 AND timeout < ' + timeoutUpperBound : 'active == FALSE AND failed == null';

                var jobs = _this4.realm.objects('Job').filtered(initialQuery).sorted([['priority', true], ['created', false]]);

                if (jobs.length) {
                  nextJob = jobs[0];
                }

                if (nextJob) {

                  var concurrency = _this4.worker.getConcurrency(nextJob.name);

                  var allRelatedJobsQuery = queueLifespanRemaining ? 'name == "' + nextJob.name + '" AND active == FALSE AND failed == null AND timeout > 0 AND timeout < ' + timeoutUpperBound : 'name == "' + nextJob.name + '" AND active == FALSE AND failed == null';

                  var allRelatedJobs = _this4.realm.objects('Job').filtered(allRelatedJobsQuery).sorted([['priority', true], ['created', false]]);

                  var jobsToMarkActive = allRelatedJobs.slice(0, concurrency);

                  var concurrentJobIds = jobsToMarkActive.map(function (job) {
                    return job.id;
                  });

                  jobsToMarkActive = jobsToMarkActive.map(function (job) {
                    job.active = true;
                  });

                  var reselectQuery = concurrentJobIds.map(function (jobId) {
                    return 'id == "' + jobId + '"';
                  }).join(' OR ');
                  var reselectedJobs = _this4.realm.objects('Job').filtered(reselectQuery).sorted([['priority', true], ['created', false]]);

                  concurrentJobs = reselectedJobs.slice(0, concurrency);
                }
              });

              return _context4.abrupt('return', concurrentJobs);

            case 3:
            case 'end':
              return _context4.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'processJob',
    value: function processJob(job) {
      var _this5 = this;

      var jobName, jobId, jobPayload, jobData;
      return regeneratorRuntime.async(function processJob$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              jobName = job.name;
              jobId = job.id;
              jobPayload = JSON.parse(job.payload);

              this.worker.executeJobLifecycleCallback('onStart', jobName, jobId, jobPayload);

              _context5.prev = 4;
              _context5.next = 7;
              return regeneratorRuntime.awrap(this.worker.executeJob(job));

            case 7:
              this.realm.write(function () {

                _this5.realm.delete(job);
              });

              this.worker.executeJobLifecycleCallback('onSuccess', jobName, jobId, jobPayload);
              this.worker.executeJobLifecycleCallback('onComplete', jobName, jobId, jobPayload);

              _context5.next = 18;
              break;

            case 12:
              _context5.prev = 12;
              _context5.t0 = _context5['catch'](4);
              jobData = JSON.parse(job.data);


              this.realm.write(function () {
                if (!jobData.failedAttempts) {
                  jobData.failedAttempts = 1;
                } else {
                  jobData.failedAttempts++;
                }

                if (!jobData.errors) {
                  jobData.errors = [_context5.t0.message];
                } else {
                  jobData.errors.push(_context5.t0.message);
                }

                job.data = JSON.stringify(jobData);

                job.active = false;

                if (jobData.failedAttempts >= jobData.attempts) {
                  job.failed = new Date();
                }
              });

              this.worker.executeJobLifecycleCallback('onFailure', jobName, jobId, jobPayload);

              if (jobData.failedAttempts >= jobData.attempts) {
                this.worker.executeJobLifecycleCallback('onFailed', jobName, jobId, jobPayload);
                this.worker.executeJobLifecycleCallback('onComplete', jobName, jobId, jobPayload);
              }

            case 18:
            case 'end':
              return _context5.stop();
          }
        }
      }, null, this, [[4, 12]]);
    }
  }, {
    key: 'flushQueue',
    value: function flushQueue() {
      var _this6 = this;

      var jobName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;


      if (jobName) {

        this.realm.write(function () {

          var jobs = _this6.realm.objects('Job').filtered('name == "' + jobName + '"');

          if (jobs.length) {
            _this6.realm.delete(jobs);
          }
        });
      } else {
        this.realm.write(function () {

          _this6.realm.deleteAll();
        });
      }
    }
  }]);

  return Queue;
}();

exports.default = function queueFactory() {
  var queue;
  return regeneratorRuntime.async(function queueFactory$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          queue = new Queue();
          _context6.next = 3;
          return regeneratorRuntime.awrap(queue.init());

        case 3:
          return _context6.abrupt('return', queue);

        case 4:
        case 'end':
          return _context6.stop();
      }
    }
  }, null, this);
};