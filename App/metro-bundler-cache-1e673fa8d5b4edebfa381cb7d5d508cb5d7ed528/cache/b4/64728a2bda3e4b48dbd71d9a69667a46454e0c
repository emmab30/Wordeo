Object.defineProperty(exports, "__esModule", {
    value: true
});

var _this = this;

var _reactNative = require('react-native');

var PREFIX = 'react-native-cacher:values:';
var DEFAULT_EXPIRES = 999999;

function b64EncodeUnicode(str) {
    if (_reactNative.Platform.OS === 'android') {
        return encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (match, p1) {
            return String.fromCharCode('0x' + p1);
        });
    }
    return str;
}

function b64DecodeUnicode(str) {
    if (_reactNative.Platform.OS === 'android') {
        return decodeURIComponent(Array.prototype.map.call(str, function (c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
    }
    return str;
}

function currentTime() {
    return Math.floor(new Date().getTime() / 1000);
}

var MemoryCache = {};

MemoryCache.set = function _callee(key, value) {
    var expires = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_EXPIRES;
    var k, storageValue;
    return regeneratorRuntime.async(function _callee$(_context) {
        while (1) {
            switch (_context.prev = _context.next) {
                case 0:
                    k = PREFIX + key;
                    storageValue = {
                        value: value,
                        expires: currentTime() + parseInt(expires)
                    };
                    _context.prev = 2;
                    _context.next = 5;
                    return regeneratorRuntime.awrap(_reactNative.AsyncStorage.setItem(k, b64EncodeUnicode(JSON.stringify(storageValue))));

                case 5:
                    return _context.abrupt('return', null);

                case 8:
                    _context.prev = 8;
                    _context.t0 = _context['catch'](2);
                    return _context.abrupt('return', { error: _context.t0 });

                case 11:
                case 'end':
                    return _context.stop();
            }
        }
    }, null, _this, [[2, 8]]);
};

MemoryCache.get = function _callee2(key) {
    var k, curTime, v;
    return regeneratorRuntime.async(function _callee2$(_context2) {
        while (1) {
            switch (_context2.prev = _context2.next) {
                case 0:
                    k = PREFIX + key, curTime = currentTime();
                    _context2.prev = 1;
                    _context2.next = 4;
                    return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem(k));

                case 4:
                    v = _context2.sent;


                    v = v ? JSON.parse(_reactNative.Platform.OS == 'android' ? b64DecodeUnicode(v) : v) : null;

                    if (!(v && v.expires && v.expires >= curTime)) {
                        _context2.next = 10;
                        break;
                    }

                    return _context2.abrupt('return', v.value);

                case 10:
                    _context2.next = 12;
                    return regeneratorRuntime.awrap(_reactNative.AsyncStorage.removeItem(k));

                case 12:
                    _context2.next = 17;
                    break;

                case 14:
                    _context2.prev = 14;
                    _context2.t0 = _context2['catch'](1);
                    return _context2.abrupt('return', { error: _context2.t0 });

                case 17:
                    return _context2.abrupt('return', null);

                case 18:
                case 'end':
                    return _context2.stop();
            }
        }
    }, null, _this, [[1, 14]]);
};

MemoryCache.remove = function _callee3(key) {
    var k;
    return regeneratorRuntime.async(function _callee3$(_context3) {
        while (1) {
            switch (_context3.prev = _context3.next) {
                case 0:
                    k = PREFIX + key;
                    _context3.prev = 1;
                    _context3.next = 4;
                    return regeneratorRuntime.awrap(_reactNative.AsyncStorage.removeItem(k));

                case 4:
                    return _context3.abrupt('return', null);

                case 7:
                    _context3.prev = 7;
                    _context3.t0 = _context3['catch'](1);
                    return _context3.abrupt('return', { error: _context3.t0 });

                case 10:
                case 'end':
                    return _context3.stop();
            }
        }
    }, null, _this, [[1, 7]]);
};

MemoryCache.multiGet = function (keys) {
    return new Promise(function (resolve, reject) {
        var counter = 0,
            result = {};

        var _loop = function _loop(key) {
            MemoryCache.get(key).then(function (value) {
                result[key] = value;
                if (++counter == keys.length) {
                    resolve(result);
                }
            }).catch(function () {
                result[key] = null;
                if (++counter == keys.length) {
                    resolve(result);
                }
            });
        };

        for (var _iterator = keys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var key = _ref;

            _loop(key);
        }
    });
};

MemoryCache.multiSet = function (values) {
    var expires = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_EXPIRES;

    return new Promise(function (resolve, reject) {
        var counter = 0,
            length = Object.keys(values).length;
        for (var key in values) {
            MemoryCache.set(key, values[key], expires).then(function () {
                if (++counter == length) {
                    resolve(null);
                }
            }).catch(function (err) {
                return reject({ error: err });
            });
        }
    });
};

MemoryCache.multiRemove = function (keys) {
    return new Promise(function (resolve, reject) {
        var counter = 0;
        for (var _iterator2 = keys, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
            var _ref2;

            if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
            } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
            }

            var key = _ref2;

            MemoryCache.remove(key).then(function () {
                if (++counter == keys.length) {
                    resolve(null);
                }
            }).catch(function (err) {
                return reject({ error: err });
            });
        }
    });
};

MemoryCache.flush = function _callee4() {
    var keys;
    return regeneratorRuntime.async(function _callee4$(_context4) {
        while (1) {
            switch (_context4.prev = _context4.next) {
                case 0:
                    _context4.prev = 0;
                    _context4.next = 3;
                    return regeneratorRuntime.awrap(MemoryCache.getAllKeys());

                case 3:
                    keys = _context4.sent;
                    _context4.next = 6;
                    return regeneratorRuntime.awrap(MemoryCache.multiRemove(keys));

                case 6:
                    return _context4.abrupt('return', _context4.sent);

                case 9:
                    _context4.prev = 9;
                    _context4.t0 = _context4['catch'](0);
                    return _context4.abrupt('return', { error: _context4.t0 });

                case 12:
                case 'end':
                    return _context4.stop();
            }
        }
    }, null, _this, [[0, 9]]);
};

MemoryCache.isExpired = function _callee5(key) {
    var k, v;
    return regeneratorRuntime.async(function _callee5$(_context5) {
        while (1) {
            switch (_context5.prev = _context5.next) {
                case 0:
                    k = PREFIX + key;
                    _context5.prev = 1;
                    _context5.next = 4;
                    return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem(k));

                case 4:
                    v = _context5.sent;

                    v = JSON.parse(v && _reactNative.Platform.OS == 'android' ? b64DecodeUnicode(v) : v);
                    return _context5.abrupt('return', !v.expires || v.expires < currentTime());

                case 9:
                    _context5.prev = 9;
                    _context5.t0 = _context5['catch'](1);
                    return _context5.abrupt('return', { error: _context5.t0 });

                case 12:
                case 'end':
                    return _context5.stop();
            }
        }
    }, null, _this, [[1, 9]]);
};

MemoryCache.getAllKeys = function _callee6() {
    var keys, tmpKeys, _iterator3, _isArray3, _i3, _ref3, key;

    return regeneratorRuntime.async(function _callee6$(_context6) {
        while (1) {
            switch (_context6.prev = _context6.next) {
                case 0:
                    _context6.prev = 0;
                    _context6.next = 3;
                    return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getAllKeys());

                case 3:
                    keys = _context6.sent;
                    tmpKeys = [];
                    _iterator3 = keys, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === 'function' ? typeof Symbol === 'function' ? Symbol.iterator : '@@iterator' : '@@iterator']();

                case 6:
                    if (!_isArray3) {
                        _context6.next = 12;
                        break;
                    }

                    if (!(_i3 >= _iterator3.length)) {
                        _context6.next = 9;
                        break;
                    }

                    return _context6.abrupt('break', 20);

                case 9:
                    _ref3 = _iterator3[_i3++];
                    _context6.next = 16;
                    break;

                case 12:
                    _i3 = _iterator3.next();

                    if (!_i3.done) {
                        _context6.next = 15;
                        break;
                    }

                    return _context6.abrupt('break', 20);

                case 15:
                    _ref3 = _i3.value;

                case 16:
                    key = _ref3;

                    if (key.match(PREFIX) !== null) {
                        key = key.replace(PREFIX, '');
                        tmpKeys.push(key);
                    }

                case 18:
                    _context6.next = 6;
                    break;

                case 20:
                    return _context6.abrupt('return', tmpKeys);

                case 23:
                    _context6.prev = 23;
                    _context6.t0 = _context6['catch'](0);
                    return _context6.abrupt('return', { error: _context6.t0 });

                case 26:
                case 'end':
                    return _context6.stop();
            }
        }
    }, null, _this, [[0, 23]]);
};

MemoryCache.getAllValues = function () {
    return MemoryCache.getAllKeys().then(function (all) {
        return all.reduce(function (prev, next) {
            _reactNative.AsyncStorage.getItem(PREFIX + next).then(function (item) {
                return prev[next] = item;
            });
            return prev;
        }, {});
    });
};

exports.default = MemoryCache;