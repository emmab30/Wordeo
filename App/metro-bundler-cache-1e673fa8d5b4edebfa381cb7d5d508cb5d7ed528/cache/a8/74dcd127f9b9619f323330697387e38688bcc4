Object.defineProperty(exports, "__esModule", {
  value: true
});

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require('../index.js');

var _index2 = _interopRequireDefault(_index);

var _ProgressEvent = require('./ProgressEvent.js');

var _ProgressEvent2 = _interopRequireDefault(_ProgressEvent);

var _EventTarget2 = require('./EventTarget');

var _EventTarget3 = _interopRequireDefault(_EventTarget2);

var _Blob = require('./Blob');

var _Blob2 = _interopRequireDefault(_Blob);

var _log = require('../utils/log.js');

var _log2 = _interopRequireDefault(_log);

var _fs = require('../fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var log = new _log2.default('FileReader');

log.level(3);

var FileReader = function (_EventTarget) {
  _inherits(FileReader, _EventTarget);

  _createClass(FileReader, [{
    key: 'isRNFBPolyFill',
    get: function get() {
      return true;
    }
  }], [{
    key: 'EMPTY',
    get: function get() {
      return 0;
    }
  }, {
    key: 'LOADING',
    get: function get() {
      return 1;
    }
  }, {
    key: 'DONE',
    get: function get() {
      return 2;
    }
  }]);

  function FileReader() {
    _classCallCheck(this, FileReader);

    var _this = _possibleConstructorReturn(this, (FileReader.__proto__ || Object.getPrototypeOf(FileReader)).call(this));

    _this._readState = 0;

    log.verbose('file reader const');
    _this._result = null;
    return _this;
  }

  _createClass(FileReader, [{
    key: 'abort',
    value: function abort() {
      log.verbose('abort');
    }
  }, {
    key: 'readAsArrayBuffer',
    value: function readAsArrayBuffer(b) {
      log.verbose('readAsArrayBuffer', b);
    }
  }, {
    key: 'readAsBinaryString',
    value: function readAsBinaryString(b) {
      log.verbose('readAsBinaryString', b);
    }
  }, {
    key: 'readAsText',
    value: function readAsText(b, label) {
      log.verbose('readAsText', b, label);
    }
  }, {
    key: 'readAsDataURL',
    value: function readAsDataURL(b) {
      log.verbose('readAsDataURL', b);
    }
  }, {
    key: 'dispatchEvent',
    value: function dispatchEvent(event, e) {
      log.verbose('dispatch event', event, e);
      _get(FileReader.prototype.__proto__ || Object.getPrototypeOf(FileReader.prototype), 'dispatchEvent', this).call(this, event, e);
      if (typeof this['on' + event] === 'function') {
        this['on' + event](e);
      }
    }
  }, {
    key: 'readyState',
    get: function get() {
      return this._readyState;
    }
  }, {
    key: 'result',
    get: function get() {
      return this._result;
    }
  }]);

  return FileReader;
}(_EventTarget3.default);

exports.default = FileReader;