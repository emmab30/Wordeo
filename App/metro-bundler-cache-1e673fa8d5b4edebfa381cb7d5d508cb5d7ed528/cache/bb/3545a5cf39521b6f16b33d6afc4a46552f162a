Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DocumentSnapshot = require('./DocumentSnapshot');

var _DocumentSnapshot2 = _interopRequireDefault(_DocumentSnapshot);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DocumentChange = function () {
  function DocumentChange(firestore, nativeData) {
    _classCallCheck(this, DocumentChange);

    this._document = new _DocumentSnapshot2.default(firestore, nativeData.document);
    this._newIndex = nativeData.newIndex;
    this._oldIndex = nativeData.oldIndex;
    this._type = nativeData.type;
  }

  _createClass(DocumentChange, [{
    key: 'doc',
    get: function get() {
      return this._document;
    }
  }, {
    key: 'newIndex',
    get: function get() {
      return this._newIndex;
    }
  }, {
    key: 'oldIndex',
    get: function get() {
      return this._oldIndex;
    }
  }, {
    key: 'type',
    get: function get() {
      return this._type;
    }
  }]);

  return DocumentChange;
}();

exports.default = DocumentChange;