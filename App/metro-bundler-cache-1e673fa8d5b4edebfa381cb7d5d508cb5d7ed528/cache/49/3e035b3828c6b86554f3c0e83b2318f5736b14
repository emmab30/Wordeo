Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../node_modules/react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = '/Users/eabuslaiman-mcpro/Trabajo/Qroom/Wordeo/App/screens/dashboard/home.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactNative = require('react-native');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _strings = require('../../components/localization/strings');

var _FinishedRound = require('../../components/modals/celebration/FinishedRound');

var _FinishedRound2 = _interopRequireDefault(_FinishedRound);

var _global = require('../../components/common/global');

var _CustomNavbar = require('../../components/navigation/CustomNavbar');

var _CustomNavbar2 = _interopRequireDefault(_CustomNavbar);

var _CustomMenu = require('../../components/navigation/CustomMenu');

var _CustomMenu2 = _interopRequireDefault(_CustomMenu);

var _Room = require('../../components/componentsJs/Room');

var _Room2 = _interopRequireDefault(_Room);

var _NewRoomWizard = require('../../components/modals/NewRoomWizard');

var _NewRoomWizard2 = _interopRequireDefault(_NewRoomWizard);

var _ProtectedRoomPassword = require('../../components/modals/ProtectedRoomPassword');

var _ProtectedRoomPassword2 = _interopRequireDefault(_ProtectedRoomPassword);

var _Services = require('../../services/Services');

var _SpinnerComponent = require('../../components/SpinnerComponent');

var _SpinnerComponent2 = _interopRequireDefault(_SpinnerComponent);

var _CommonDialog = require('../../components/dialogs/CommonDialog');

var _CommonDialog2 = _interopRequireDefault(_CommonDialog);

var _reactNativeNavigation = require('react-native-navigation');

var _reactNativeOrientation = require('react-native-orientation');

var _reactNativeOrientation2 = _interopRequireDefault(_reactNativeOrientation);

var _general = require('../../styles/general');

var _default = require('../../styles/default');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
    Home: {
        displayName: 'Home'
    }
};

var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: '/Users/eabuslaiman-mcpro/Trabajo/Qroom/Wordeo/App/screens/dashboard/home.js',
    components: _components,
    locals: [module],
    imports: [_react3.default]
});

function _wrapComponent(id) {
    return function (Component) {
        return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
}

var _Dimensions$get = _reactNative.Dimensions.get('window'),
    height = _Dimensions$get.height,
    width = _Dimensions$get.width;

var Sound = require('react-native-sound');

var Home = _wrapComponent('Home')(function (_Component) {
    _inherits(Home, _Component);

    function Home(props) {
        _classCallCheck(this, Home);

        var _this = _possibleConstructorReturn(this, (Home.__proto__ || Object.getPrototypeOf(Home)).call(this, props));

        _this.state = {
            rooms: [],
            isNewRoomWizard: false,
            spinner: true,
            usersStatistics: {
                online: 0
            },
            isPullingRooms: false
        };

        rootNavigator = _this.props.navigator;

        _this.onJoinRoomSuccess = _this.onJoinRoomSuccess.bind(_this);
        _this.pullRooms = _this.pullRooms.bind(_this);
        _this.customNavbar = null;
        _this._deltaY = new _reactNative.Animated.Value(0);
        return _this;
    }

    _createClass(Home, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            _reactNativeOrientation2.default.lockToPortrait();
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {}
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            this.setState({ spinner: false });

            this.pullRooms();
            this.pullRate();
            this.pullUsersOnline();
            setInterval(function () {
                _this2.pullRooms();
                _this2.pullRate();
                _this2.pullUsersOnline();
            }, 15000);

            this.onRoomCreatedListener = _global.Global.eventEmitter.addListener('onRoomCreated', this._onRoomCreated.bind(this));
            this.onRoomRemovedListener = _global.Global.eventEmitter.addListener('onRoomRemoved', this._onRoomRemoved.bind(this));

            _Services.PreferencesService.loadPreferences();
        }
    }, {
        key: 'pullUsersOnline',
        value: function pullUsersOnline() {
            var _this3 = this;

            _Services.ConfigurationService.getUserStatistics(function (data) {
                if (data.usersStatistics) {
                    _this3.setState({ usersStatistics: data.usersStatistics });
                }
            }, function (err) {});
        }
    }, {
        key: 'pullRate',
        value: function pullRate() {
            var _this4 = this;

            _Services.ConfigurationService.getTulsRate(function (data) {
                if (data && data.value > 0) {
                    _this4.setState({ tulsRate: parseFloat(data.value) });
                    _Services.ConfigurationService.tulsRate = parseFloat(data.value);
                }
            }, function (err) {});
        }
    }, {
        key: 'pullRooms',
        value: function pullRooms() {
            var _this5 = this;

            this.setState({ isPullingRooms: true });
            _Services.RoomService.get({}, function (rooms) {
                _this5.setState({ rooms: rooms, isPullingRooms: false });
            }, function (err) {});
        }
    }, {
        key: '_onRoomCreated',
        value: function _onRoomCreated(value) {
            this.pullRooms();
        }
    }, {
        key: '_onRoomRemoved',
        value: function _onRoomRemoved(value) {
            this.pullRooms();
        }
    }, {
        key: 'onJoinRoomSuccess',
        value: function onJoinRoomSuccess(room) {
            var _this6 = this;

            this.setState({ spinner: true });
            _Services.SocketService.emit('requestJoinToRoom', { roomId: room.id });
            setTimeout(function () {
                var screen = _extends({}, _global.Global.Screen.Dashboard.Round);
                screen.passProps = {
                    round: room
                };
                _this6.props.navigator.showModal(screen);
                _this6.setState({ spinner: false });
            }, 100);
        }
    }, {
        key: 'renderNavbar',
        value: function renderNavbar() {
            var _this7 = this;

            return _react3.default.createElement(_CustomNavbar2.default, {
                ref: function ref(e) {
                    _this7.customNavbar = e;
                },
                navigator: this.props.navigator,
                backButton: false,
                gradientColors: [_default.Color.OrangePrimary, _default.Color.OrangeSecondary],
                customLeftView: function customLeftView() {
                    return _react3.default.createElement(
                        _reactNative.TouchableOpacity,
                        { onPress: function onPress() {
                                _this7.setState({ menuOpened: true });
                            }, style: { flex: 1, paddingLeft: 0, justifyContent: 'center', width: '100%', height: '100%' }, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 157
                            }
                        },
                        _react3.default.createElement(_reactNative.Image, {
                            style: { alignSelf: 'flex-start', resizeMode: 'contain', height: 20 },
                            source: require('../../images/wordeo/navbar/hamburguer.png'), __source: {
                                fileName: _jsxFileName,
                                lineNumber: 160
                            }
                        })
                    );
                },
                customCenterView: function customCenterView() {
                    return _react3.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            style: { flex: 1, flexDirection: 'row', alignSelf: 'center', justifyContent: 'center', alignItems: 'center', width: '100%', height: '100%' }, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 168
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.Text,
                            { style: _general.GeneralStyle.customNavbarTitle, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 170
                                }
                            },
                            _strings.strings.Rooms.toUpperCase()
                        )
                    );
                },
                customRightView: function customRightView() {
                    var numbersOnline = _this7.state.usersStatistics.online;
                    if (numbersOnline > 1000) {
                        numbersOnline = numbersOnline.toString().substr(0, 1) + 'k';
                    }
                    return _react3.default.createElement(
                        _reactNative.View,
                        { style: { flex: 1, width: '100%', height: '100%', justifyContent: 'center', alignItems: 'center' }, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 182
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    _this7.customNavbar.showMessage('Hey! Esta es la cantidad de personas jugando Wordeo en este momento. Incluyéndote!', {
                                        backgroundColor: '#1aba5d',
                                        duration: 3500,
                                        animation: "bounceInDown",
                                        animationDuration: 500,
                                        onPress: function onPress() {
                                            _this7.customNavbar.hide();
                                        }
                                    });
                                },
                                style: { flex: 1, backgroundColor: 'red', paddingLeft: 0, justifyContent: 'center', width: '100%', alignSelf: 'flex-end', height: '100%', backgroundColor: 'transparent', alignItems: 'center' }, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 183
                                }
                            },
                            _react3.default.createElement(
                                _reactNative.Text,
                                { style: { textAlign: 'center', color: 'white', fontSize: 15, fontFamily: _default.Font.TitanOne }, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 196
                                    }
                                },
                                numbersOnline,
                                ' jugadores'
                            )
                        ),
                        _react3.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    _this7.customNavbar.showMessage('Es el porcentaje de Tuls que ganarás por cada ronda con relacion a los puntos. Esto quiere decir que si en una ronda ganas 750 puntos de exp, ganarás ' + 750 * _this7.state.tulsRate / 100 + ' tuls.', {
                                        backgroundColor: '#1aba5d',
                                        duration: 10000,
                                        animation: "bounceInUp",
                                        animationDuration: 750,
                                        onPress: function onPress() {
                                            _this7.customNavbar.hide();
                                        }
                                    });
                                },
                                style: { flex: 1, paddingLeft: 0, justifyContent: 'center', width: '100%', height: '100%', backgroundColor: 'transparent', alignItems: 'center' }, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 200
                                }
                            },
                            _react3.default.createElement(
                                _reactNative.Text,
                                { style: { textAlign: 'center', color: 'white', fontSize: 15, fontFamily: _default.Font.TitanOne }, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 213
                                    }
                                },
                                'Rate ',
                                _this7.state.tulsRate,
                                '%'
                            )
                        )
                    );
                },
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 150
                }
            });
        }
    }, {
        key: 'renderCustomMenu',
        value: function renderCustomMenu() {
            var _this8 = this;

            return _react3.default.createElement(_CustomMenu2.default, {
                isOpened: this.state.menuOpened,
                onClose: function onClose() {
                    _this8.setState({ menuOpened: false });
                },
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 225
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this9 = this;

            return _react3.default.createElement(
                _reactNative.View,
                { style: styles.container, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 235
                    }
                },
                _react3.default.createElement(_SpinnerComponent2.default, {
                    isVisible: this.state.spinner, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 237
                    }
                }),
                _react3.default.createElement(_CommonDialog2.default, {
                    ref: function ref(e) {
                        _this9.commonDialog = e;
                    }, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 240
                    }
                }),
                this.renderNavbar(),
                this.renderCustomMenu(),
                _react3.default.createElement(_reactNative.FlatList, {
                    centerContent: false,
                    snapToAlignment: 'start',
                    data: this.state.rooms,
                    extraData: this.state.rooms.length,
                    ListHeaderComponent: function ListHeaderComponent() {
                        return _react3.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    _Services.AnalyticsService.trackEvent('create_room_cta');
                                    _this9.setState({ isNewRoomWizard: true });
                                },
                                style: { flex: 1, paddingLeft: 0, justifyContent: 'center', width: '98%', height: 50, backgroundColor: _default.Color.BluePrimary, alignSelf: 'center', marginVertical: 15, borderRadius: 5, shadowColor: 'rgba(255,255,255,.5)', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.3, shadowRadius: 1 }, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 268
                                }
                            },
                            _react3.default.createElement(
                                _reactNative.Text,
                                { style: { marginRight: 5, fontFamily: _default.Font.TitanOne, fontSize: 24, color: '#eee', textAlign: 'center', backgroundColor: 'transparent' }, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 274
                                    }
                                },
                                'CREAR SALA'
                            )
                        );
                    },
                    renderItem: function renderItem(rowData) {
                        return _this9.renderRoom(rowData.item);
                    },
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 261
                    }
                }),
                _react3.default.createElement(_NewRoomWizard2.default, {
                    onClose: function onClose() {
                        _this9.setState({ isNewRoomWizard: false });
                        setTimeout(function () {
                            _this9.customNavbar.showMessage('¿Te haz arrepentido? ¡Siéntete libre de crear una sala nueva para jugar con tus amigos!', {
                                duration: 3000,
                                animation: "fadeIn",
                                animationDuration: 500
                            });
                        }, 1000);
                    },
                    onCreatedRoom: function onCreatedRoom(room) {
                        _this9.onJoinRoomSuccess(room);
                    },
                    isVisible: this.state.isNewRoomWizard,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 283
                    }
                }),
                _react3.default.createElement(_ProtectedRoomPassword2.default, {
                    onClose: function onClose() {
                        _this9.setState({ selectedRoom: null });
                    },
                    onJoin: function onJoin() {
                        _this9.onJoinRoomSuccess(_this9.state.selectedRoom);
                    },
                    isVisible: this.state.selectedRoom != null && this.state.selectedRoom.isProtected,
                    room: this.state.selectedRoom,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 300
                    }
                })
            );
        }
    }, {
        key: 'renderRoom',
        value: function renderRoom(item) {
            var _this10 = this;

            return _react3.default.createElement(_Room2.default, {
                key: 'room-' + item.id,
                room: item,
                onTapRoom: function onTapRoom(room) {
                    if (room.isProtected) {
                        _this10.setState({ selectedRoom: room });
                    } else {
                        var joinReq = { roomId: room.id };
                        _Services.RoomService.join(joinReq, function (success) {
                            _this10.onJoinRoomSuccess(room);
                        }, function (err) {
                            if (err.message) {
                                _this10.commonDialog.show('error', err.message);
                            }
                        });
                    }
                },
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 317
                }
            });
        }
    }]);

    return Home;
}(_react2.Component));

exports.default = Home;


var styles = _reactNative.StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#2a3a4b'
    }
});