

'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createResults = createResults;

var _collections = require('./collections');

var _collections2 = _interopRequireDefault(_collections);

var _constants = require('./constants');

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Results = function (_Collection) {
    _inherits(Results, _Collection);

    function Results() {
        _classCallCheck(this, Results);

        return _possibleConstructorReturn(this, (Results.__proto__ || Object.getPrototypeOf(Results)).apply(this, arguments));
    }

    return Results;
}(_collections2.default);

exports.default = Results;

(0, _util.createMethods)(Results.prototype, _constants.objectTypes.RESULTS, ['filtered', 'sorted', 'snapshot', 'subscribe', 'isValid', 'indexOf', 'min', 'max', 'sum', 'avg', 'addListener', 'removeListener', 'removeAllListeners']);

(0, _util.createMethods)(Results.prototype, _constants.objectTypes.RESULTS, ['update'], true);

function createResults(realmId, info) {
    return (0, _collections.createCollection)(Results.prototype, realmId, info);
}