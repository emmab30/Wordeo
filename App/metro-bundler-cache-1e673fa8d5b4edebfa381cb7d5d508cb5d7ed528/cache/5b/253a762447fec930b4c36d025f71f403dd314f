Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _EventTarget2 = require('./EventTarget.js');

var _EventTarget3 = _interopRequireDefault(_EventTarget2);

var _log = require('../utils/log.js');

var _log2 = _interopRequireDefault(_log);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var log = new _log2.default('XMLHttpRequestEventTarget');

log.disable();

var XMLHttpRequestEventTarget = function (_EventTarget) {
  _inherits(XMLHttpRequestEventTarget, _EventTarget);

  function XMLHttpRequestEventTarget() {
    _classCallCheck(this, XMLHttpRequestEventTarget);

    var _this = _possibleConstructorReturn(this, (XMLHttpRequestEventTarget.__proto__ || Object.getPrototypeOf(XMLHttpRequestEventTarget)).call(this));

    _this._onabort = function () {};

    _this._onerror = function () {};

    _this._onload = function () {};

    _this._onloadstart = function () {};

    _this._onprogress = function () {};

    _this._ontimeout = function () {};

    _this._onloadend = function () {};

    log.info('constructor called');
    return _this;
  }

  _createClass(XMLHttpRequestEventTarget, [{
    key: 'dispatchEvent',
    value: function dispatchEvent(event, e) {
      log.debug('dispatch event', event, e);
      _get(XMLHttpRequestEventTarget.prototype.__proto__ || Object.getPrototypeOf(XMLHttpRequestEventTarget.prototype), 'dispatchEvent', this).call(this, event, e);
      switch (event) {
        case 'abort':
          this._onabort(e);
          break;
        case 'error':
          this._onerror(e);
          break;
        case 'load':
          this._onload(e);
          break;
        case 'loadstart':
          this._onloadstart(e);
          break;
        case 'loadend':
          this._onloadend(e);
          break;
        case 'progress':
          this._onprogress(e);
          break;
        case 'timeout':
          this._ontimeout(e);
          break;
      }
    }
  }, {
    key: 'onabort',
    set: function set(fn) {
      log.info('set onabort');
      this._onabort = fn;
    },
    get: function get() {
      return this._onabort;
    }
  }, {
    key: 'onerror',
    set: function set(fn) {
      log.info('set onerror');
      this._onerror = fn;
    },
    get: function get() {
      return this._onerror;
    }
  }, {
    key: 'onload',
    set: function set(fn) {
      log.info('set onload', fn);
      this._onload = fn;
    },
    get: function get() {
      return this._onload;
    }
  }, {
    key: 'onloadstart',
    set: function set(fn) {
      log.info('set onloadstart');
      this._onloadstart = fn;
    },
    get: function get() {
      return this._onloadstart;
    }
  }, {
    key: 'onprogress',
    set: function set(fn) {
      log.info('set onprogress');
      this._onprogress = fn;
    },
    get: function get() {
      return this._onprogress;
    }
  }, {
    key: 'ontimeout',
    set: function set(fn) {
      log.info('set ontimeout');
      this._ontimeout = fn;
    },
    get: function get() {
      return this._ontimeout;
    }
  }, {
    key: 'onloadend',
    set: function set(fn) {
      log.info('set onloadend');
      this._onloadend = fn;
    },
    get: function get() {
      return this._onloadend;
    }
  }]);

  return XMLHttpRequestEventTarget;
}(_EventTarget3.default);

exports.default = XMLHttpRequestEventTarget;