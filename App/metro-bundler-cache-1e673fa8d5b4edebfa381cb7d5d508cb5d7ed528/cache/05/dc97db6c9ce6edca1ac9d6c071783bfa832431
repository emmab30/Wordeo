Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require('../index.js');

var _index2 = _interopRequireDefault(_index);

var _fs = require('../fs.js');

var _fs2 = _interopRequireDefault(_fs);

var _uuid = require('../utils/uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _log = require('../utils/log.js');

var _log2 = _interopRequireDefault(_log);

var _EventTarget2 = require('./EventTarget');

var _EventTarget3 = _interopRequireDefault(_EventTarget2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var log = new _log2.default('Blob');
var blobCacheDir = _fs2.default.dirs.DocumentDir + '/RNFetchBlob-blobs/';

log.disable();

var Blob = function (_EventTarget) {
  _inherits(Blob, _EventTarget);

  _createClass(Blob, [{
    key: 'blobPath',
    get: function get() {
      return this._ref;
    }
  }], [{
    key: 'clearCache',
    value: function clearCache() {
      return _fs2.default.unlink(blobCacheDir).then(function () {
        return _fs2.default.mkdir(blobCacheDir);
      });
    }
  }, {
    key: 'build',
    value: function build(data, cType) {
      return new Promise(function (resolve, reject) {
        new Blob(data, cType).onCreated(resolve);
      });
    }
  }, {
    key: 'setLog',
    value: function setLog(level) {
      if (level === -1) log.disable();else log.level(level);
    }
  }]);

  function Blob(data, cType, defer) {
    _classCallCheck(this, Blob);

    var _this = _possibleConstructorReturn(this, (Blob.__proto__ || Object.getPrototypeOf(Blob)).call(this));

    _this.isRNFetchBlobPolyfill = true;
    _this.multipartBoundary = null;
    _this._ref = null;
    _this._blobCreated = false;
    _this._onCreated = [];
    _this._closed = false;

    cType = cType || {};
    _this.cacheName = getBlobName();
    _this.isRNFetchBlobPolyfill = true;
    _this.isDerived = defer;
    _this.type = cType.type || 'text/plain';
    log.verbose('Blob constructor called', 'mime', _this.type, 'type', typeof data, 'length', data ? data.length : 0);
    _this._ref = blobCacheDir + _this.cacheName;
    var p = null;
    if (!data) data = '';
    if (data.isRNFetchBlobPolyfill) {
      log.verbose('create Blob cache file from Blob object');
      var size = 0;
      _this._ref = String(data.getRNFetchBlobRef());
      var orgPath = _this._ref;

      p = _fs2.default.exists(orgPath).then(function (exist) {
        if (exist) return _fs2.default.writeFile(orgPath, data, 'uri').then(function (size) {
          return Promise.resolve(size);
        }).catch(function (err) {
          throw 'RNFetchBlob Blob file creation error, ' + err;
        });else throw 'could not create Blob from path ' + orgPath + ', file not exists';
      });
    } else if (data instanceof FormData) {
        log.verbose('create Blob cache file from FormData', data);
        var boundary = 'RNFetchBlob-' + _this.cacheName + '-' + Date.now();
        _this.multipartBoundary = boundary;
        var parts = data.getParts();
        var formArray = [];
        if (!parts) {
          p = _fs2.default.writeFile(_this._ref, '', 'utf8');
        } else {
          for (var i in parts) {
            formArray.push('\r\n--' + boundary + '\r\n');
            var part = parts[i];
            for (var j in part.headers) {
              formArray.push(j + ': ' + part.headers[j] + '\r\n');
            }
            formArray.push('\r\n');
            if (part.isRNFetchBlobPolyfill) formArray.push(part);else formArray.push(part.string);
          }
          log.verbose('FormData array', formArray);
          formArray.push('\r\n--' + boundary + '--\r\n');
          p = createMixedBlobData(_this._ref, formArray);
        }
      } else if (typeof data === 'string' && data.startsWith('RNFetchBlob-file://')) {
          log.verbose('create Blob cache file from file path', data);

          _this._isReference = true;
          _this._ref = String(data).replace('RNFetchBlob-file://', '');
          var _orgPath = _this._ref;
          if (defer) return _possibleConstructorReturn(_this);else {
            p = _fs2.default.stat(_orgPath).then(function (stat) {
              return Promise.resolve(stat.size);
            });
          }
        } else if (typeof data === 'string') {
            var encoding = 'utf8';
            var mime = String(_this.type);

            if (/(application\/octet|\;base64)/i.test(mime)) encoding = 'base64';else data = data.toString();

            _this.type = String(_this.type).replace(/;base64/ig, '');
            log.verbose('create Blob cache file from string', 'encode', encoding);
            p = _fs2.default.writeFile(_this._ref, data, encoding).then(function (size) {
              return Promise.resolve(size);
            });
          } else if (Array.isArray(data)) {
              log.verbose('create Blob cache file from mixed array', data);
              p = createMixedBlobData(_this._ref, data);
            } else {
              data = data.toString();
              p = _fs2.default.writeFile(_this._ref, data, 'utf8').then(function (size) {
                return Promise.resolve(size);
              });
            }
    p && p.then(function (size) {
      _this.size = size;
      _this._invokeOnCreateEvent();
    }).catch(function (err) {
      log.error('RNFetchBlob could not create Blob : ' + _this._ref, err);
    });

    return _this;
  }

  _createClass(Blob, [{
    key: 'onCreated',
    value: function onCreated(fn) {
      log.verbose('#register blob onCreated', this._blobCreated);
      if (!this._blobCreated) this._onCreated.push(fn);else {
        fn(this);
      }
      return this;
    }
  }, {
    key: 'markAsDerived',
    value: function markAsDerived() {
      this._isDerived = true;
    }
  }, {
    key: 'getRNFetchBlobRef',
    value: function getRNFetchBlobRef() {
      return this._ref;
    }
  }, {
    key: 'slice',
    value: function slice(start, end) {
      var _this2 = this;

      var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

      if (this._closed) throw 'Blob has been released.';
      log.verbose('slice called', start, end, contentType);

      var resPath = blobCacheDir + getBlobName();
      var pass = false;
      log.debug('fs.slice new blob will at', resPath);
      var result = new Blob(_index2.default.wrap(resPath), { type: contentType }, true);
      _fs2.default.exists(blobCacheDir).then(function (exist) {
        if (exist) return Promise.resolve();
        return _fs2.default.mkdir(blobCacheDir);
      }).then(function () {
        return _fs2.default.slice(_this2._ref, resPath, start, end);
      }).then(function (dest) {
        log.debug('fs.slice done', dest);
        result._invokeOnCreateEvent();
        pass = true;
      }).catch(function (err) {
        console.warn('Blob.slice failed:', err);
        pass = true;
      });
      log.debug('slice returning new Blob');

      return result;
    }
  }, {
    key: 'readBlob',
    value: function readBlob(encoding) {
      if (this._closed) throw 'Blob has been released.';
      return _fs2.default.readFile(this._ref, encoding || 'utf8');
    }
  }, {
    key: 'close',
    value: function close() {
      if (this._closed) return Promise.reject('Blob has been released.');
      this._closed = true;
      return _fs2.default.unlink(this._ref).catch(function (err) {
        console.warn(err);
      });
    }
  }, {
    key: 'safeClose',
    value: function safeClose() {
      if (this._closed) return Promise.reject('Blob has been released.');
      this._closed = true;
      if (!this._isReference) {
        return _fs2.default.unlink(this._ref).catch(function (err) {
          console.warn(err);
        });
      } else {
        return Promise.resolve();
      }
    }
  }, {
    key: '_invokeOnCreateEvent',
    value: function _invokeOnCreateEvent() {
      log.verbose('invoke create event', this._onCreated);
      this._blobCreated = true;
      var fns = this._onCreated;
      for (var i in fns) {
        if (typeof fns[i] === 'function') {
          fns[i](this);
        }
      }
      delete this._onCreated;
    }
  }, {
    key: 'isDerived',
    get: function get() {
      return this._isDerived || false;
    }
  }]);

  return Blob;
}(_EventTarget3.default);

exports.default = Blob;

function getBlobName() {
  return 'blob-' + (0, _uuid2.default)();
}

function createMixedBlobData(ref, dataArray) {
  var p = _fs2.default.writeFile(ref, '');
  var args = [];
  var size = 0;
  for (var i in dataArray) {
    var part = dataArray[i];
    if (!part) continue;
    if (part.isRNFetchBlobPolyfill) {
      args.push([ref, part._ref, 'uri']);
    } else if (typeof part === 'string') args.push([ref, part, 'utf8']);else if (Array.isArray(part)) args.push([ref, part, 'ascii']);
  }

  var _loop = function _loop(_i) {
    p = p.then(function (written) {
      var arg = this;
      if (written) size += written;
      log.verbose('mixed blob write', args[_i], written);
      return _fs2.default.appendFile.apply(_fs2.default, _toConsumableArray(arg));
    }.bind(args[_i]));
  };

  for (var _i in args) {
    _loop(_i);
  }
  return p.then(function () {
    return Promise.resolve(size);
  });
}