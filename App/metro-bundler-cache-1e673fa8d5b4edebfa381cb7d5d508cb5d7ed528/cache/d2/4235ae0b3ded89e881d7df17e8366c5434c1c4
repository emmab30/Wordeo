Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/eabuslaiman-mcpro/Trabajo/Qroom/Wordeo/App/node_modules/react-native-navigation/src/Navigation.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _platformSpecificDeprecated = require('./deprecated/platformSpecificDeprecated');

var _platformSpecificDeprecated2 = _interopRequireDefault(_platformSpecificDeprecated);

var _Screen3 = require('./Screen');

var _PropRegistry = require('./PropRegistry');

var _PropRegistry2 = _interopRequireDefault(_PropRegistry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var registeredScreens = {};
var _allNavigatorEventHandlers = {};

function registerScreen(screenID, generator) {
  registeredScreens[screenID] = generator;
  _reactNative.AppRegistry.registerComponent(screenID, generator);
}

function registerComponent(screenID, generator) {
  var store = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
  var Provider = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

  if (store && Provider) {
    return _registerComponentRedux(screenID, generator, store, Provider, options);
  } else {
    return _registerComponentNoRedux(screenID, generator);
  }
}

function _registerComponentNoRedux(screenID, generator) {
  var generatorWrapper = function generatorWrapper() {
    var _class, _temp;

    var InternalComponent = generator();
    if (!InternalComponent) {
      console.error('Navigation: ' + screenID + ' registration result is \'undefined\'');
    }

    return _temp = _class = function (_Screen) {
      _inherits(_class, _Screen);

      function _class(props) {
        _classCallCheck(this, _class);

        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));

        _this.state = {
          internalProps: _extends({}, props, _PropRegistry2.default.load(props.screenInstanceID || props.passPropsKey))
        };
        return _this;
      }

      _createClass(_class, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          this.setState({
            internalProps: _extends({}, _PropRegistry2.default.load(this.props.screenInstanceID || this.props.passPropsKey), nextProps)
          });
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement(InternalComponent, _extends({ testID: screenID, navigator: this.navigator }, this.state.internalProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 51
            }
          }));
        }
      }]);

      return _class;
    }(_Screen3.Screen), _class.navigatorStyle = InternalComponent.navigatorStyle || {}, _class.navigatorButtons = InternalComponent.navigatorButtons || {}, _temp;
  };
  registerScreen(screenID, generatorWrapper);
  return generatorWrapper;
}

function _registerComponentRedux(screenID, generator, store, Provider, options) {
  var generatorWrapper = function generatorWrapper() {
    var _class2, _temp2;

    var InternalComponent = generator();
    return _temp2 = _class2 = function (_Screen2) {
      _inherits(_class2, _Screen2);

      function _class2(props) {
        _classCallCheck(this, _class2);

        var _this2 = _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).call(this, props));

        _this2.state = {
          internalProps: _extends({}, props, _PropRegistry2.default.load(props.screenInstanceID || props.passPropsKey))
        };
        return _this2;
      }

      _createClass(_class2, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          this.setState({
            internalProps: _extends({}, _PropRegistry2.default.load(this.props.screenInstanceID || this.props.passPropsKey), nextProps)
          });
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement(
            Provider,
            _extends({ store: store }, options, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 82
              }
            }),
            _react2.default.createElement(InternalComponent, _extends({ testID: screenID, navigator: this.navigator }, this.state.internalProps, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 83
              }
            }))
          );
        }
      }]);

      return _class2;
    }(_Screen3.Screen), _class2.navigatorStyle = InternalComponent.navigatorStyle || {}, _class2.navigatorButtons = InternalComponent.navigatorButtons || {}, _temp2;
  };
  registerScreen(screenID, generatorWrapper);
  return generatorWrapper;
}

function getRegisteredScreen(screenID) {
  var generator = registeredScreens[screenID];
  if (!generator) {
    console.error('Navigation.getRegisteredScreen: ' + screenID + ' used but not yet registered');
    return undefined;
  }
  return generator();
}

function showModal() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return _platformSpecificDeprecated2.default.showModal(params);
}

function dismissModal() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return _platformSpecificDeprecated2.default.dismissModal(params);
}

function dismissAllModals() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return _platformSpecificDeprecated2.default.dismissAllModals(params);
}

function showSnackbar() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return _platformSpecificDeprecated2.default.showSnackbar(params);
}

function showLightBox() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return _platformSpecificDeprecated2.default.showLightBox(params);
}

function dismissLightBox() {
  return _platformSpecificDeprecated2.default.dismissLightBox();
}

function showInAppNotification() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return _platformSpecificDeprecated2.default.showInAppNotification(params);
}

function dismissInAppNotification() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return _platformSpecificDeprecated2.default.dismissInAppNotification(params);
}

function startTabBasedApp(params) {
  return regeneratorRuntime.async(function startTabBasedApp$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return regeneratorRuntime.awrap(_platformSpecificDeprecated2.default.startTabBasedApp(params));

        case 3:
          return _context.abrupt('return', _context.sent);

        case 6:
          _context.prev = 6;
          _context.t0 = _context['catch'](0);

          console.error('Error while starting app: ' + _context.t0);

        case 9:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this, [[0, 6]]);
}

function startSingleScreenApp(params) {
  return regeneratorRuntime.async(function startSingleScreenApp$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return regeneratorRuntime.awrap(_platformSpecificDeprecated2.default.startSingleScreenApp(params));

        case 3:
          return _context2.abrupt('return', _context2.sent);

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2['catch'](0);

          console.error('Error while starting app: ' + _context2.t0);

        case 9:
        case 'end':
          return _context2.stop();
      }
    }
  }, null, this, [[0, 6]]);
}

function setEventHandler(navigatorEventID, eventHandler) {
  _allNavigatorEventHandlers[navigatorEventID] = eventHandler;
}

function clearEventHandler(navigatorEventID) {
  delete _allNavigatorEventHandlers[navigatorEventID];
}

function handleDeepLink() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var link = params.link,
      payload = params.payload;


  if (!link) return;

  var event = _extends({
    type: 'DeepLink',
    link: link
  }, payload ? { payload: payload } : {});
  for (var i in _allNavigatorEventHandlers) {
    _allNavigatorEventHandlers[i](event);
  }
}

function isAppLaunched() {
  return regeneratorRuntime.async(function isAppLaunched$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return regeneratorRuntime.awrap(_platformSpecificDeprecated2.default.isAppLaunched());

        case 2:
          return _context3.abrupt('return', _context3.sent);

        case 3:
        case 'end':
          return _context3.stop();
      }
    }
  }, null, this);
}

function isRootLaunched() {
  return regeneratorRuntime.async(function isRootLaunched$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return regeneratorRuntime.awrap(_platformSpecificDeprecated2.default.isRootLaunched());

        case 2:
          return _context4.abrupt('return', _context4.sent);

        case 3:
        case 'end':
          return _context4.stop();
      }
    }
  }, null, this);
}

function getCurrentlyVisibleScreenId() {
  return _platformSpecificDeprecated2.default.getCurrentlyVisibleScreenId();
}

function getLaunchArgs() {
  return regeneratorRuntime.async(function getLaunchArgs$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return regeneratorRuntime.awrap(_platformSpecificDeprecated2.default.getLaunchArgs());

        case 2:
          return _context5.abrupt('return', _context5.sent);

        case 3:
        case 'end':
          return _context5.stop();
      }
    }
  }, null, this);
}

exports.default = {
  getRegisteredScreen: getRegisteredScreen,
  getCurrentlyVisibleScreenId: getCurrentlyVisibleScreenId,
  registerComponent: registerComponent,
  showModal: showModal,
  dismissModal: dismissModal,
  dismissAllModals: dismissAllModals,
  showSnackbar: showSnackbar,
  showLightBox: showLightBox,
  dismissLightBox: dismissLightBox,
  showInAppNotification: showInAppNotification,
  dismissInAppNotification: dismissInAppNotification,
  startTabBasedApp: startTabBasedApp,
  startSingleScreenApp: startSingleScreenApp,
  setEventHandler: setEventHandler,
  clearEventHandler: clearEventHandler,
  handleDeepLink: handleDeepLink,
  isAppLaunched: isAppLaunched,
  isRootLaunched: isRootLaunched,
  getLaunchArgs: getLaunchArgs
};