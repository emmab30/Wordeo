Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _config = require('./config');

var _realm = require('realm');

var _realm2 = _interopRequireDefault(_realm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var JobSchema = {
  name: 'Job',
  primaryKey: 'id',
  properties: {
    id: 'string',
    name: 'string',
    payload: 'string',
    data: 'string',
    priority: 'int',
    active: { type: 'bool', default: false },
    timeout: 'int',
    created: 'date',
    failed: 'date?' }
};

var Database = function () {
  function Database() {
    _classCallCheck(this, Database);
  }

  _createClass(Database, null, [{
    key: 'getRealmInstance',
    value: function getRealmInstance() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return regeneratorRuntime.async(function getRealmInstance$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(Database.realmInstance === null)) {
                _context.next = 4;
                break;
              }

              _context.next = 3;
              return regeneratorRuntime.awrap(_realm2.default.open({
                path: options.realmPath || _config.Config.REALM_PATH,
                schemaVersion: _config.Config.REALM_SCHEMA_VERSION,
                schema: [JobSchema]

              }));

            case 3:
              Database.realmInstance = _context.sent;

            case 4:
              return _context.abrupt('return', Database.realmInstance);

            case 5:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }]);

  return Database;
}();

Database.realmInstance = null;
exports.default = Database;