Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GoogleAnalyticsSettings = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _NativeBridges = require('./NativeBridges');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GoogleAnalyticsSettings = exports.GoogleAnalyticsSettings = function () {
  function GoogleAnalyticsSettings() {
    _classCallCheck(this, GoogleAnalyticsSettings);
  }

  _createClass(GoogleAnalyticsSettings, null, [{
    key: 'setOptOut',
    value: function setOptOut(enabled) {
      _NativeBridges.GoogleAnalyticsBridge.setOptOut(enabled);
    }
  }, {
    key: 'setDispatchInterval',
    value: function setDispatchInterval(intervalInSeconds) {
      _NativeBridges.GoogleAnalyticsBridge.setDispatchInterval(intervalInSeconds);
    }
  }, {
    key: 'setDryRun',
    value: function setDryRun(enabled) {
      _NativeBridges.GoogleAnalyticsBridge.setDryRun(enabled);
    }
  }]);

  return GoogleAnalyticsSettings;
}();