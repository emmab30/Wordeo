Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Navigator = exports.Screen = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _platformSpecificDeprecated = require('./deprecated/platformSpecificDeprecated');

var _platformSpecificDeprecated2 = _interopRequireDefault(_platformSpecificDeprecated);

var _Navigation = require('./Navigation');

var _Navigation2 = _interopRequireDefault(_Navigation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NavigationSpecific = {
  push: _platformSpecificDeprecated2.default.navigatorPush,
  pop: _platformSpecificDeprecated2.default.navigatorPop,
  popToRoot: _platformSpecificDeprecated2.default.navigatorPopToRoot,
  resetTo: _platformSpecificDeprecated2.default.navigatorResetTo
};

var Navigator = function () {
  function Navigator(navigatorID, navigatorEventID, screenInstanceID) {
    _classCallCheck(this, Navigator);

    this.navigatorID = navigatorID;
    this.screenInstanceID = screenInstanceID;
    this.navigatorEventID = navigatorEventID;
    this.navigatorEventHandler = null;
    this.navigatorEventHandlers = [];
    this.navigatorEventSubscription = null;
  }

  _createClass(Navigator, [{
    key: 'push',
    value: function push() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return NavigationSpecific.push(this, params);
    }
  }, {
    key: 'pop',
    value: function pop() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return NavigationSpecific.pop(this, params);
    }
  }, {
    key: 'popToRoot',
    value: function popToRoot() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return NavigationSpecific.popToRoot(this, params);
    }
  }, {
    key: 'resetTo',
    value: function resetTo() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return NavigationSpecific.resetTo(this, params);
    }
  }, {
    key: 'showModal',
    value: function showModal() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _Navigation2.default.showModal(params);
    }
  }, {
    key: 'showLightBox',
    value: function showLightBox() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _Navigation2.default.showLightBox(params);
    }
  }, {
    key: 'dismissModal',
    value: function dismissModal() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _Navigation2.default.dismissModal(params);
    }
  }, {
    key: 'dismissAllModals',
    value: function dismissAllModals() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _Navigation2.default.dismissAllModals(params);
    }
  }, {
    key: 'showLightBox',
    value: function showLightBox() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _Navigation2.default.showLightBox(params);
    }
  }, {
    key: 'dismissLightBox',
    value: function dismissLightBox() {
      return _Navigation2.default.dismissLightBox();
    }
  }, {
    key: 'showInAppNotification',
    value: function showInAppNotification() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _Navigation2.default.showInAppNotification(params);
    }
  }, {
    key: 'dismissInAppNotification',
    value: function dismissInAppNotification() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _Navigation2.default.dismissInAppNotification(params);
    }
  }, {
    key: 'setButtons',
    value: function setButtons() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _platformSpecificDeprecated2.default.navigatorSetButtons(this, this.navigatorEventID, params);
    }
  }, {
    key: 'setTitle',
    value: function setTitle() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _platformSpecificDeprecated2.default.navigatorSetTitle(this, params);
    }
  }, {
    key: 'setSubTitle',
    value: function setSubTitle() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _platformSpecificDeprecated2.default.navigatorSetSubtitle(this, params);
    }
  }, {
    key: 'setTitleImage',
    value: function setTitleImage() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _platformSpecificDeprecated2.default.navigatorSetTitleImage(this, params);
    }
  }, {
    key: 'setStyle',
    value: function setStyle() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _platformSpecificDeprecated2.default.navigatorSetStyle(this, params);
    }
  }, {
    key: 'toggleDrawer',
    value: function toggleDrawer() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _platformSpecificDeprecated2.default.navigatorToggleDrawer(this, params);
    }
  }, {
    key: 'setDrawerEnabled',
    value: function setDrawerEnabled() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _platformSpecificDeprecated2.default.navigatorSetDrawerEnabled(this, params);
    }
  }, {
    key: 'toggleTabs',
    value: function toggleTabs() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _platformSpecificDeprecated2.default.navigatorToggleTabs(this, params);
    }
  }, {
    key: 'toggleNavBar',
    value: function toggleNavBar() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _platformSpecificDeprecated2.default.navigatorToggleNavBar(this, params);
    }
  }, {
    key: 'setTabBadge',
    value: function setTabBadge() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _platformSpecificDeprecated2.default.navigatorSetTabBadge(this, params);
    }
  }, {
    key: 'setTabButton',
    value: function setTabButton() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _platformSpecificDeprecated2.default.navigatorSetTabButton(this, params);
    }
  }, {
    key: 'switchToTab',
    value: function switchToTab() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _platformSpecificDeprecated2.default.navigatorSwitchToTab(this, params);
    }
  }, {
    key: 'switchToTopTab',
    value: function switchToTopTab() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _platformSpecificDeprecated2.default.navigatorSwitchToTopTab(this, params);
    }
  }, {
    key: 'showSnackbar',
    value: function showSnackbar() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return _platformSpecificDeprecated2.default.showSnackbar(params);
    }
  }, {
    key: 'dismissSnackbar',
    value: function dismissSnackbar() {
      return _platformSpecificDeprecated2.default.dismissSnackbar();
    }
  }, {
    key: 'showContextualMenu',
    value: function showContextualMenu(params, onButtonPressed) {
      return _platformSpecificDeprecated2.default.showContextualMenu(this, params, onButtonPressed);
    }
  }, {
    key: 'dismissContextualMenu',
    value: function dismissContextualMenu() {
      return _platformSpecificDeprecated2.default.dismissContextualMenu();
    }
  }, {
    key: 'setOnNavigatorEvent',
    value: function setOnNavigatorEvent(callback) {
      if (this.navigatorEventHandlers.length > 0) {
        throw new Error('setOnNavigatorEvent can not be used after addOnNavigatorEvent has been called');
      }
      this.navigatorEventHandler = callback;
      this._registerNavigatorEvent();
    }
  }, {
    key: 'addOnNavigatorEvent',
    value: function addOnNavigatorEvent(callback) {
      var _this = this;

      if (this.navigatorEventHandler) {
        throw new Error('addOnNavigatorEvent can not be used after setOnNavigatorEvent has been called');
      }
      if (this.navigatorEventHandlers.indexOf(callback) === -1) {
        this.navigatorEventHandlers.push(callback);
      }
      this._registerNavigatorEvent();

      return function () {
        return _this._removeOnNavigatorEvent(callback);
      };
    }
  }, {
    key: '_registerNavigatorEvent',
    value: function _registerNavigatorEvent() {
      var _this2 = this;

      if (!this.navigatorEventSubscription) {
        var Emitter = _reactNative.Platform.OS === 'android' ? _reactNative.DeviceEventEmitter : _reactNative.NativeAppEventEmitter;
        this.navigatorEventSubscription = Emitter.addListener(this.navigatorEventID, function (event) {
          return _this2.onNavigatorEvent(event);
        });
        _Navigation2.default.setEventHandler(this.navigatorEventID, function (event) {
          return _this2.onNavigatorEvent(event);
        });
      }
    }
  }, {
    key: '_removeOnNavigatorEvent',
    value: function _removeOnNavigatorEvent(callback) {
      var index = this.navigatorEventHandlers.indexOf(callback);
      if (index !== -1) {
        this.navigatorEventHandlers.splice(index, 1);
      }
    }
  }, {
    key: 'onNavigatorEvent',
    value: function onNavigatorEvent(event) {
      if (this.navigatorEventHandler) {
        this.navigatorEventHandler(event);
      }
      this.navigatorEventHandlers.forEach(function (handler) {
        return handler(event);
      });
    }
  }, {
    key: 'handleDeepLink',
    value: function handleDeepLink() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _Navigation2.default.handleDeepLink(params);
    }
  }, {
    key: 'cleanup',
    value: function cleanup() {
      if (this.navigatorEventSubscription) {
        this.navigatorEventSubscription.remove();
        this.navigatorEventHandlers = [];
        _Navigation2.default.clearEventHandler(this.navigatorEventID);
      }
    }
  }, {
    key: 'screenIsCurrentlyVisible',
    value: function screenIsCurrentlyVisible() {
      var res;
      return regeneratorRuntime.async(function screenIsCurrentlyVisible$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(_Navigation2.default.getCurrentlyVisibleScreenId());

            case 2:
              res = _context.sent;

              if (res) {
                _context.next = 5;
                break;
              }

              return _context.abrupt('return', false);

            case 5:
              return _context.abrupt('return', res.screenId === this.screenInstanceID);

            case 6:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }]);

  return Navigator;
}();

var Screen = function (_Component) {
  _inherits(Screen, _Component);

  function Screen(props) {
    _classCallCheck(this, Screen);

    var _this3 = _possibleConstructorReturn(this, (Screen.__proto__ || Object.getPrototypeOf(Screen)).call(this, props));

    if (props.navigatorID) {
      _this3.navigator = new Navigator(props.navigatorID, props.navigatorEventID, props.screenInstanceID);
    }
    return _this3;
  }

  _createClass(Screen, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.navigator) {
        this.navigator.cleanup();
        this.navigator = undefined;
      }
    }
  }]);

  return Screen;
}(_react.Component);

Screen.navigatorStyle = {};
Screen.navigatorButtons = {};
exports.Screen = Screen;
exports.Navigator = Navigator;