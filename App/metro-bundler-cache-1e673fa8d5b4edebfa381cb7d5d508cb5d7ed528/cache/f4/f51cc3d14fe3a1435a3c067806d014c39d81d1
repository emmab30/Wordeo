Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactNative = require('react-native');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NativeEventsReceiver = function () {
  function NativeEventsReceiver() {
    _classCallCheck(this, NativeEventsReceiver);

    this.emitter = _reactNative.Platform.OS === 'android' ? _reactNative.DeviceEventEmitter : _reactNative.NativeAppEventEmitter;
  }

  _createClass(NativeEventsReceiver, [{
    key: 'appLaunched',
    value: function appLaunched(callback) {
      this.emitter.addListener('RNN.appLaunched', callback);
    }
  }]);

  return NativeEventsReceiver;
}();

exports.default = NativeEventsReceiver;