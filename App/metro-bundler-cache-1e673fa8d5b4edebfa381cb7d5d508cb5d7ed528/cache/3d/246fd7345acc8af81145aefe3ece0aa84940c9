Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.statics = exports.NAMESPACE = exports.MODULE_NAME = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ModuleBase2 = require('../../utils/ModuleBase');

var _ModuleBase3 = _interopRequireDefault(_ModuleBase2);

var _native = require('../../utils/native');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MODULE_NAME = exports.MODULE_NAME = 'RNFirebaseCrash';
var NAMESPACE = exports.NAMESPACE = 'crash';

var Crash = function (_ModuleBase) {
  _inherits(Crash, _ModuleBase);

  function Crash(app) {
    _classCallCheck(this, Crash);

    return _possibleConstructorReturn(this, (Crash.__proto__ || Object.getPrototypeOf(Crash)).call(this, app, {
      moduleName: MODULE_NAME,
      multiApp: false,
      namespace: NAMESPACE
    }));
  }

  _createClass(Crash, [{
    key: 'setCrashCollectionEnabled',
    value: function setCrashCollectionEnabled(enabled) {
      (0, _native.getNativeModule)(this).setCrashCollectionEnabled(enabled);
    }
  }, {
    key: 'isCrashCollectionEnabled',
    value: function isCrashCollectionEnabled() {
      return (0, _native.getNativeModule)(this).isCrashCollectionEnabled();
    }
  }, {
    key: 'log',
    value: function log(message) {
      (0, _native.getNativeModule)(this).log(message);
    }
  }, {
    key: 'logcat',
    value: function logcat(level, tag, message) {
      (0, _native.getNativeModule)(this).logcat(level, tag, message);
    }
  }, {
    key: 'report',
    value: function report(error) {
      var maxStackSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;

      if (!error || !error.message) return;

      var errorMessage = 'Message: ' + error.message + '\r\n';

      if (error.code) {
        errorMessage = errorMessage + 'Code: ' + error.code + '\r\n';
      }

      var stackRows = error.stack.split('\n');
      errorMessage = errorMessage + '\r\nStack: \r\n';
      for (var i = 0, len = stackRows.length; i < len; i++) {
        if (i === maxStackSize) break;
        errorMessage = errorMessage + '  -  ' + stackRows[i] + '\r\n';
      }

      (0, _native.getNativeModule)(this).report(errorMessage);
    }
  }]);

  return Crash;
}(_ModuleBase3.default);

exports.default = Crash;
var statics = exports.statics = {};