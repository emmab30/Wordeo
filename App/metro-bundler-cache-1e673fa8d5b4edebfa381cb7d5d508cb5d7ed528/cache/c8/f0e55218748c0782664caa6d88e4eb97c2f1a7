Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('./../../utils');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RemoteMessage = function () {
  function RemoteMessage(sender) {
    _classCallCheck(this, RemoteMessage);

    this.properties = {
      id: (0, _utils.generatePushID)(),
      ttl: 3600,

      sender: ('' + sender).includes('@') ? sender : sender + '@gcm.googleapis.com',
      type: 'remote',
      data: {}
    };
  }

  _createClass(RemoteMessage, [{
    key: 'setTtl',
    value: function setTtl(ttl) {
      this.properties.ttl = ttl;
      return this;
    }
  }, {
    key: 'setId',
    value: function setId(id) {
      this.properties.id = '' + id;
      return this;
    }
  }, {
    key: 'setType',
    value: function setType(type) {
      this.properties.type = '' + type;
      return this;
    }
  }, {
    key: 'setCollapseKey',
    value: function setCollapseKey(key) {
      this.properties.collapseKey = '' + key;
      return this;
    }
  }, {
    key: 'setData',
    value: function setData() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (!(0, _utils.isObject)(data)) {
        throw new Error('RemoteMessage:setData expects an object as the first parameter but got type \'' + typeof data + '\'.');
      }

      var props = Object.keys(data);

      for (var i = 0, len = props.length; i < len; i++) {
        var prop = props[i];
        this.properties.data[prop] = '' + data[prop];
      }

      return this;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return _extends({}, this.properties);
    }
  }]);

  return RemoteMessage;
}();

exports.default = RemoteMessage;