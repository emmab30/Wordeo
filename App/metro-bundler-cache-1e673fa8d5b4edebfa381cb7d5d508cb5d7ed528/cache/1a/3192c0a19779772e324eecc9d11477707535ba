Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _log = require('./log');

var _native = require('./native');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ModuleBase = function () {
  function ModuleBase(app, config) {
    _classCallCheck(this, ModuleBase);

    if (!config.moduleName) {
      throw new Error('Missing module name');
    }
    if (!config.namespace) {
      throw new Error('Missing namespace');
    }
    var moduleName = config.moduleName;

    this._app = app;
    this.namespace = config.namespace;

    (0, _native.initialiseNativeModule)(this, config);
    (0, _log.initialiseLogger)(this, app.name + ':' + moduleName.replace('RNFirebase', ''));
  }

  _createClass(ModuleBase, [{
    key: 'app',
    get: function get() {
      return this._app;
    }
  }]);

  return ModuleBase;
}();

exports.default = ModuleBase;