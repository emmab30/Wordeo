Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../node_modules/react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = '/Users/eabuslaiman-mcpro/Trabajo/Qroom/Wordeo/App/components/dialogs/ConfirmationDialog.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactNative = require('react-native');

var _strings = require('../localization/strings');

var _reactNativeModalOverlay = require('react-native-modal-overlay');

var _reactNativeModalOverlay2 = _interopRequireDefault(_reactNativeModalOverlay);

var _default = require('../../styles/default');

var _global = require('../../components/common/global');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
    ConfirmationDialog: {
        displayName: 'ConfirmationDialog'
    }
};

var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: '/Users/eabuslaiman-mcpro/Trabajo/Qroom/Wordeo/App/components/dialogs/ConfirmationDialog.js',
    components: _components,
    locals: [module],
    imports: [_react3.default]
});

function _wrapComponent(id) {
    return function (Component) {
        return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
}

var width = _reactNative.Dimensions.get('window').width;
var height = _reactNative.Dimensions.get('window').height;

var ConfirmationDialog = _wrapComponent('ConfirmationDialog')(function (_Component) {
    _inherits(ConfirmationDialog, _Component);

    function ConfirmationDialog(props) {
        _classCallCheck(this, ConfirmationDialog);

        var _this = _possibleConstructorReturn(this, (ConfirmationDialog.__proto__ || Object.getPrototypeOf(ConfirmationDialog)).call(this, props));

        _this.show = function (message, opts) {
            var msg = _extends({}, _this.state.message);
            msg.message = message;
            msg.opts = opts;
            _this.setState({ isVisible: true, message: msg });
        };

        _this.hide = function () {
            _this.setState({ isVisible: false });
        };

        _this.state = {
            isVisible: false,
            height: height,
            isLandscape: false,
            heightInnerViewContent: 0,
            message: {
                message: '',
                opts: {}
            }
        };
        return _this;
    }

    _createClass(ConfirmationDialog, [{
        key: 'componentWillUpdate',
        value: function componentWillUpdate() {}
    }, {
        key: 'onLayoutTextMessage',
        value: function onLayoutTextMessage(e) {
            var _e$nativeEvent$layout = e.nativeEvent.layout,
                x = _e$nativeEvent$layout.x,
                y = _e$nativeEvent$layout.y,
                width = _e$nativeEvent$layout.width,
                height = _e$nativeEvent$layout.height;

            if (height != null) {
                this.setState({ heightInnerViewContent: height + 100 });
            }
        }
    }, {
        key: 'onLayout',
        value: function onLayout(e) {
            var _this2 = this;

            this.setState({ height: _reactNative.Dimensions.get('window').height });

            _global.Global.getOrientation(function (orientation) {
                _this2.setState({
                    isLandscape: orientation == 'LANDSCAPE'
                });
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            if (!this.state.isVisible) return null;

            return _react3.default.createElement(
                _reactNative.View,
                {
                    onLayout: this.onLayout.bind(this), __source: {
                        fileName: _jsxFileName,
                        lineNumber: 86
                    }
                },
                _react3.default.createElement(
                    _reactNativeModalOverlay2.default,
                    {
                        ref: 'overlay',
                        visible: this.state.isVisible,
                        closeOnTouchOutside: true,
                        animationType: 'fadeInDown',
                        animationOutType: 'fadeOut',
                        animationDuration: 400,
                        onClose: function onClose() {
                            if (_this3.state.message.opts.onCancel) {
                                _this3.state.message.opts.onCancel();
                            }
                        },
                        containerStyle: { backgroundColor: 'rgba(255, 255, 255, 0.95)', flex: 1, width: '100%' },
                        childrenWrapperStyle: [styles.overlayChildren, { backgroundColor: _default.Color.BluePrimary, borderRadius: 10, width: this.state.isLandscape ? '60%' : '100%', maxHeight: 140, maxHeight: this.state.heightInnerViewContent > 0 ? this.state.heightInnerViewContent : 180, height: this.state.height - 100, paddingBottom: this.props.paddingBottom !== undefined ? this.props.paddingBottom : 0 }], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 88
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.Text,
                        { onLayout: this.onLayoutTextMessage.bind(this), style: styles.errorMessage, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 103
                            }
                        },
                        this.state.message.message
                    ),
                    _react3.default.createElement(
                        _reactNative.View,
                        { style: { flex: 1, flexDirection: 'row' }, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 104
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress(e) {
                                    if (_this3.state.message.opts.onSuccess) {
                                        _this3.state.message.opts.onSuccess();
                                    }
                                },
                                style: styles.buttonOk, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 105
                                }
                            },
                            _react3.default.createElement(
                                _reactNative.Text,
                                { style: styles.buttonOkText, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 112
                                    }
                                },
                                _strings.strings.Confirm
                            )
                        ),
                        _react3.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress(e) {
                                    if (_this3.state.message.opts.onCancel) {
                                        _this3.state.message.opts.onCancel();
                                    }
                                },
                                style: styles.buttonCancel, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 115
                                }
                            },
                            _react3.default.createElement(
                                _reactNative.Text,
                                { style: styles.buttonCancelText, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 122
                                    }
                                },
                                _strings.strings.Cancel
                            )
                        )
                    )
                )
            );
        }
    }]);

    return ConfirmationDialog;
}(_react2.Component));

exports.default = ConfirmationDialog;


var styles = _reactNative.StyleSheet.create({
    errorTitle: {
        textAlign: 'center',
        color: 'white',
        fontFamily: _default.Font.PTSansBold,
        fontSize: 17,
        marginBottom: 20
    },
    errorMessage: {
        textAlign: 'center',
        color: 'white',
        fontFamily: _default.Font.PTSansBold,
        fontSize: 17,
        marginBottom: 20
    },
    buttonCancel: {
        flex: 1,
        marginRight: 5,
        height: 45,
        alignItems: 'center',
        justifyContent: 'center',

        backgroundColor: _default.Color.LightPrimary,
        borderRadius: 20
    },
    buttonCancelText: {
        color: '#7f7f7f',
        fontFamily: _default.Font.TitanOne,
        fontSize: 18,
        textAlign: 'center'
    },
    buttonOk: {
        flex: 1,
        height: 45,
        marginRight: 5,
        alignItems: 'center',
        justifyContent: 'center',

        backgroundColor: _default.Color.OrangePrimary,
        borderRadius: 20
    },
    buttonOkText: {
        fontFamily: _default.Font.TitanOne,
        fontSize: 18,
        color: 'white',
        textAlign: 'center'
    },
    overlayChildren: {
        shadowColor: '#222',
        shadowOffset: { width: 2, height: 2 },
        shadowOpacity: .3,
        shadowRadius: 10,
        elevation: 4,
        alignSelf: 'center'
    }
});