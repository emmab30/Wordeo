apply plugin: "com.android.application"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
apply plugin: 'io.fabric'

import com.android.build.OutputFile

def getPassword(String currentUser, String keyChain) {
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    exec {
        commandLine 'security', '-q', 'find-generic-password', '-a', currentUser, '-s', keyChain, '-w'
        standardOutput = stdout
        errorOutput = stderr
        ignoreExitValue true
    }
    //noinspection GroovyAssignabilityCheck
    stdout.toString().trim()
}

def releasekeypass = getPassword("Macbook","awesome-project-release-key")
def releasekeyalias = getPassword("Macbook","awesome-project-key-alias")

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    dexOptions {
        jumboMode true
    }

    defaultConfig {
        applicationId "com.qroom.wordeo"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 17
        versionName "1.0.0"
        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        manifestPlaceholders = [onesignal_app_id: "326392db-dd25-431b-9e26-8892f287a31a",
                                onesignal_google_project_number: "REMOTE"]
        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true
    }
    signingConfigs {
        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    repositories {
        maven { url "https://jitpack.io" }
        maven { url "https://maven.fabric.io/public" }
    }
}

dependencies {
    compile("com.facebook.react:react-native:0.51.1") {
        force = true;
    }
    compile project(':react-native-navigation')
    compile project(':react-native-interactable')
    compile(project(':react-native-firebase')) {
        // exclude version 10.+
        transitive = false
        exclude group: 'com.google.android.gms'
        exclude group: 'com.google.firebase', module: 'firebase-core'
        exclude group: 'com.google.firebase', module: 'firebase-config'
        exclude group: 'com.google.firebase', module: 'firebase-auth'
        exclude group: 'com.google.firebase', module: 'firebase-database'
        exclude group: 'com.google.firebase', module: 'firebase-storage'
        exclude group: 'com.google.firebase', module: 'firebase-messaging'
        exclude group: 'com.google.firebase', module: 'firebase-crash'
        exclude group: 'com.google.firebase', module: 'firebase-perf'
        exclude group: 'com.google.firebase', module: 'firebase-ads'
        exclude group: 'com.google.firebase', module: 'firebase-firestore'
        exclude group: 'com.google.firebase', module: 'firebase-invites'
    }
    compile project(':react-native-sound')
    compile 'com.android.support:appcompat-v7:26.0.1'
    compile project(':react-native-fbsdk')
    compile 'com.android.support:multidex:1.0.1'
    compile project(':react-native-orientation')
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }
    compile project(':react-native-fabric')
    compile(project(':react-native-device-info')) {
        exclude group: 'com.google.android.gms'
    }
    compile project(':react-native-config')
    compile project(':react-native-spinkit')
    compile(project(':react-native-onesignal')) {
        // exclude version 8.+
        exclude group: 'com.google.android.gms'
    }
    compile project(':react-native-fetch-blob')
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile 'net.hockeyapp.android:HockeySDK:4.1.4'
    compile 'com.facebook.fresco:fresco:1.3.0'
    // For animated GIF support
    compile 'com.facebook.fresco:animated-gif:1.3.0'
    // For Gradients support
    compile project(':react-native-linear-gradient')
    compile project(':react-native-file-picker')
    compile project(':react-native-fs')
    compile project(':react-native-localization')
    compile project(':react-native-i18n')
    compile project(':react-native-share')
    compile project(':realm')

    compile "com.google.android.gms:play-services-location:11.+"
    compile 'com.google.firebase:firebase-core:11.+'
    compile "com.google.firebase:firebase-analytics:11.+"
    compile("com.google.android.gms:play-services-base:11.+") {
        force = true
    }
    compile("com.google.android.gms:play-services-maps:11.+") {
        force = true;
    }
    compile ("com.google.android.gms:play-services-gcm:11.+") {
        force = true;
    }
}

apply plugin: 'com.google.gms.google-services'